local answer
primes = {2, 3, 5, 7, 11, 13, 17, 19}

function init(self)
  display_size = {gui.get_width(), gui.get_height()} --get display size
  msg.post(".", "disable") --disable game GUI when the game starts
  --several settings
  self.question = 0
  self.game = true
  level = 1
  msg.post(".", "acquire_input_focus")
  buttons= {}
  buttons_texts = {}
  for i=1,8 do
    buttons[i] = gui.get_node("number_button"..i)
    buttons_texts[i] = gui.get_node("number_button_text"..i)
  end
  -- create question and display settings
  self.question, answer = generate_question()
  reload_display(self.question, self.game)
end

function on_message(self, message_id, message, sender)
  if message_id == hash("resized") then
    --window resized
    reload_display(self.question, self.game)
    display_size = {gui.get_width(), gui.get_height()}
  end
end

function on_input(self, action_id, action)
  if action_id == hash("touch") and action.pressed then
    -- click or tap
    if not self.game then
        --reset level
  			msg.post(".", "disable")
  			msg.post("menu", "enable")
        level = 1
        self.game = true
        self.question, answer = generate_question()
        reload_display(self.question, self.game)
        return
    end

    for i=1,8 do
      -- which button is pressed
      if gui.pick_node(buttons[i], action.x, action.y) then
        --when the surplus is zero
        if self.question % primes[i] == 0 then
          self.question = self.question / primes[i]
          --when the number is "1", it goes to next stage.
          if self.question == 1 then
            level = level + 1
            self.question, answer = generate_question()
          end -- if self.question == 1
        else --if self.question % primes[i] == 0
          --game over
          self.game = false
        end --if self.question % primes[i] == 0
        reload_display(self.question, self.game)
      end --if gui.pick_node(buttons[i], action.x, action.y)
    end -- for
  end -- pressed
end

--reload display
function reload_display(question, flag)
  if flag then
    --when the answer is correct
    --gui.set_color(gui.get_node("screenshot"), vmath.vector4(gui.get_color(gui.get_node("screenshot")).x, gui.get_color(gui.get_node("screenshot")).y, gui.get_color(gui.get_node("screenshot")).z, 0))
    gui.set_text(gui.get_node("question_text"), tostring(question))
    for i = 1, 8 do
      gui.set_text(buttons_texts[i], "÷"..primes[i])
    end
  else
    -- when the answer isn't correct
    --gui.set_color(gui.get_node("screenshot"), vmath.vector4(gui.get_color(gui.get_node("screenshot")).x, gui.get_color(gui.get_node("screenshot")).y, gui.get_color(gui.get_node("screenshot")).z, 1))
    gui.set_text(gui.get_node("question_text"), "GAME OVER")
    for i = 1, 8 do
      gui.set_text(buttons_texts[i], primes[i]..": "..answer[i])
    end
    gui.set_text(gui.get_node("count_text"), (level-1).."問クリア")

    return
  end
  gui.set_text(gui.get_node("count_text"), level.."問目")
end

--create question
function generate_question()
  local answer = {0, 0, 0, 0, 0, 0, 0, 0}
  local elements_number = math.floor(level / 5) + 2
  for i=1,elements_number do
    local rnd = 9
    while rnd == 9 do
      math.randomseed(math.random()*1000000)
      rnd = math.floor((math.random() * 8)) + 1
    end
    answer[rnd] = answer[rnd] + 1
  end
  --calc
  local question = 1
  for i=1,8 do
    if not (answer[i] == 0) then
      question = question * (primes[i] ^ answer[i])
    end
  end
  return question, answer
end
