local status = true

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.animate(gui.get_node("title_text"), "position.y", gui.get_position(gui.get_node("title_text")).y - (gui.get_height()/120), gui.EASING_INOUTSINE, 1.5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	gui.set_color(gui.get_node("how_to_play"), vmath.vector4(gui.get_color(gui.get_node("how_to_play")).x, gui.get_color(gui.get_node("how_to_play")).y, gui.get_color(gui.get_node("how_to_play")).z, 0))
	window.set_listener(window_callback)
	local info = sys.get_sys_info()
	if info.system_name == "Windows" then
		--windowの設定
		display = defos.get_displays()
		display_id = defos.get_current_display_id()
		defos.set_view_size((display[display_id].bounds.width - 1280) / 2, (display[display_id].bounds.height - 720) / 2, 1280, 720)
		defos.set_console_visible(false)
	end
end

function window_callback(self, event, data)
	if event == window.WINDOW_EVENT_RESIZED then
		display_size[1] = data.width
		display_size[2] = data.height
		msg.post("game", "resized")
		gui.cancel_animation(gui.get_node("title"), "position.y")
		gui.animate(gui.get_node("title_text"), "position.y", gui.get_position(gui.get_node("title_text")).y - gui.get_height()/120, gui.EASING_INOUTSINE, 1.5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		if status then
			gui.set_color(gui.get_node("how_to_play"), vmath.vector4(gui.get_color(gui.get_node("how_to_play")).x, gui.get_color(gui.get_node("how_to_play")).y, gui.get_color(gui.get_node("how_to_play")).z, 0))
		else
			gui.set_color(gui.get_node("how_to_play"), vmath.vector4(gui.get_color(gui.get_node("how_to_play")).x, gui.get_color(gui.get_node("how_to_play")).y, gui.get_color(gui.get_node("how_to_play")).z, 1))
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(gui.get_node("start_button"), action.x, action.y) and status then
			msg.post(".", "disable")
			msg.post("game", "enable")
		elseif gui.pick_node(gui.get_node("play_button"), action.x, action.y) and status then
			status = false
			gui.set_color(gui.get_node("how_to_play"), vmath.vector4(gui.get_color(gui.get_node("how_to_play")).x, gui.get_color(gui.get_node("how_to_play")).y, gui.get_color(gui.get_node("how_to_play")).z, 1))
		elseif gui.pick_node(gui.get_node("back_button"), action.x, action.y) and not status then
			status = true
			gui.set_color(gui.get_node("how_to_play"), vmath.vector4(gui.get_color(gui.get_node("how_to_play")).x, gui.get_color(gui.get_node("how_to_play")).y, gui.get_color(gui.get_node("how_to_play")).z, 0))
		end
	end
end
